import numpy as np
import matplotlib.pyplot as plt
from scipy import stats

# Dados fornecidos pelo usuário
vertices = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]

# Tempos de execução para cada thread em ms
tempos_execucoes = {
    1: [
        [1.20, 1.80, 1.60, 2.40, 2.60, 0.80, 1.80, 1.80, 2.40, 1.60],
        [3.60, 3.60, 4.40, 3.20, 3.80, 2.60, 3.00, 3.80, 3.80, 4.20],
        [7.40, 6.60, 7.00, 5.60, 6.80, 6.00, 6.20, 6.00, 4.80, 4.80],
        [13.60, 9.20, 10.60, 9.80, 10.80, 20.20, 8.20, 9.20, 9.20, 7.80],
        [21.00, 13.00, 15.40, 16.80, 12.80, 15.60, 13.00, 13.80, 12.80, 14.20],
        [18.40, 19.60, 18.60, 22.40, 25.60, 17.60, 15.00, 17.40, 16.40, 17.60],
        [26.60, 27.20, 26.80, 26.60, 37.40, 22.40, 23.40, 28.40, 21.00, 20.00],
        [36.60, 31.80, 39.80, 31.40, 31.00, 29.00, 28.60, 32.80, 44.40, 27.00],
        [43.00, 40.40, 45.60, 38.80, 36.40, 38.60, 34.60, 59.60, 29.20, 28.20],
        [64.60, 45.60, 54.60, 43.80, 51.60, 42.40, 45.00, 42.80, 41.80, 35.40]
    ],
    2: [
        [0.20, 1.00, 1.00, 1.40, 1.00, 0.80, 3.00, 1.40, 1.00, 1.40],
        [1.00, 1.80, 2.20, 2.60, 2.20, 1.60, 3.80, 2.20, 2.60, 2.40],
        [2.20, 3.40, 3.00, 4.40, 4.20, 4.20, 4.60, 4.20, 4.00, 4.60],
        [4.40, 4.40, 3.20, 12.40, 8.20, 5.80, 4.60, 7.00, 4.20, 5.00],
        [7.80, 5.40, 7.00, 17.80, 9.60, 8.00, 15.80, 8.40, 8.80, 7.40],
        [6.60, 13.20, 9.20, 19.60, 16.60, 15.20, 15.80, 13.60, 8.40, 9.80],
        [8.80, 10.00, 13.00, 27.20, 24.20, 28.80, 12.80, 13.60, 17.20, 10.80],
        [29.80, 11.00, 14.80, 39.40, 19.20, 20.20, 23.60, 18.80, 12.80, 18.20],
        [16.20, 19.40, 18.00, 29.20, 17.80, 24.40, 25.00, 20.60, 17.00, 19.00],
        [18.20, 18.60, 33.40, 32.60, 62.00, 22.20, 35.00, 21.60, 25.40, 28.00]
    ],
    3: [
        [0.40, 1.00, 1.60, 1.00, 0.60, 0.60, 2.80, 1.00, 0.40, 1.00],
        [3.40, 1.40, 5.00, 2.20, 2.80, 1.80, 7.40, 8.60, 3.60, 2.60],
        [4.40, 2.20, 3.00, 15.80, 2.80, 5.60, 9.40, 7.00, 2.80, 6.60],
        [4.80, 3.20, 9.40, 15.00, 8.00, 3.60, 18.20, 12.40, 2.60, 4.00],
        [9.00, 4.40, 5.00, 16.00, 5.20, 6.20, 29.40, 44.20, 3.60, 7.00],
        [7.40, 6.20, 8.20, 9.40, 6.40, 7.80, 26.60, 67.60, 7.20, 6.40],
        [11.40, 9.20, 9.40, 16.00, 9.80, 11.00, 15.20, 47.80, 8.40, 11.20],
        [13.00, 10.20, 10.00, 30.00, 15.80, 15.40, 26.40, 33.20, 11.00, 10.40],
        [14.60, 34.80, 29.80, 14.20, 49.80, 26.20, 25.20, 57.00, 17.40, 16.80],
        [14.60, 17.40, 26.80, 16.60, 14.40, 28.40, 74.80, 32.00, 20.00, 19.00]
    ],
    4: [
        [3.20, 0.00, 0.80, 0.00, 0.20, 0.80, 0.40, 1.20, 1.00, 1.00],
        [5.80, 1.00, 1.80, 1.40, 2.40, 1.20, 1.40, 3.80, 5.20, 4.00],
        [4.00, 2.40, 2.00, 3.20, 4.60, 3.00, 7.40, 5.60, 3.20, 6.60],
        [7.20, 5.80, 2.40, 2.80, 23.60, 3.80, 8.60, 14.20, 3.80, 7.20],
        [7.60, 4.20, 5.00, 3.80, 3.80, 5.40, 14.40, 7.80, 9.20, 12.60],
        [8.60, 9.00, 3.80, 5.20, 7.60, 10.20, 17.80, 38.20, 41.20, 7.20],
        [14.00, 6.40, 6.00, 9.00, 10.40, 11.80, 11.60, 23.20, 12.80, 11.00],
        [17.20, 8.60, 9.80, 22.00, 14.20, 18.00, 15.20, 42.20, 9.40, 12.20],
        [17.00, 11.00, 13.40, 29.20, 10.00, 13.80, 14.20, 22.00, 13.00, 14.00],
        [17.80, 13.40, 13.80, 30.00, 17.80, 14.80, 18.40, 29.60, 16.00, 12.80]
    ]
}

# Função para calcular a média e o intervalo de confiança
def media_e_intervalo_de_confianca(dados):
    media = np.mean(dados, axis=0)
    desvio_padrao = np.std(dados, axis=0, ddof=1)
    n = len(dados[0])
    h = desvio_padrao * stats.t.ppf((1 + 0.95) / 2, n - 1) / np.sqrt(n)
    return media, h

# Cores para as 4 threads
cores = ['blue', 'green', 'red', 'orange']

# Plotando os gráficos
plt.figure(figsize=(10, 7))

for thread in range(1, 5):
    media, intervalo = media_e_intervalo_de_confianca(tempos_execucoes[thread])
    plt.plot(vertices, media, label=f'Thread {thread}', color=cores[thread-1])
    plt.fill_between(vertices, media - intervalo, media + intervalo, color=cores[thread-1], alpha=0.2)

plt.xlabel('Número de Vértices')
plt.ylabel('Tempo de Execução (ms)')
plt.title('Tempo de Execução vs Número de Vértices (com IC 95%)')
plt.legend()
plt.grid(True)
plt.show()
